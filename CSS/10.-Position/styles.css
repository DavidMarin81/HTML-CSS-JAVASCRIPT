/* 

    La propiedad position nos permite posicionar los elementos.

    Flujo de renderizado -> por norma general, los elementos se dibujan de izquierda a derecha y de arriba a abajo. El punto 0,0 de los elementos, por norma general, es la esquina superior izquierda.

    Espacio reservado -> es el espacio que tiene un elemento asignado en el navegador.

    Elemento posicionado -> esto significad que el elemento tiene la propiedad "position" con un valor distinto de "static", que es el valor que tiene esta propiedad por defecto.

    Stackin context -> contexto de apilamiento. Es el orden en el que se apilarán las cajas que se superponen, dentro del mismo contenedor.

    Al posicionar un elemento se habilitan 5 propiedades que podemos utilizar para mover los elementos en los 3 ejes:

        - top -> el elemento se moverá desde la parte superior la distancia que hayamos indicado.
        - right -> el elemento se moverá desde la parte derecha la distancia que le hayamos indicado.
        -bottom -> el elemento se moverá desde la parte inferior la distancia que le hayamos indicado.
        -left -> el elemento se moverá desde la parte izquierda la distancia que le hayamos indicado.
        z-index -> nos permite mover el elemento en el contexto de apilamiento (eje z)

        **  NOTA: Si a un elemento le declaramos la propiedad top y/o left, las propiedades bottom y/o right no funcionarán. 

    Los posibles valores que le podemos dar a position son.
        Static -> Es el valor que tiene por defecto un elemento, con este valor el elemento NO ESTÁ POSICIONADO y por lo cual no podremos moverlo

        Relative -> El elemento mantendrá su posición y medidas en el flujo de renderizado y mantendrá su espacio reservado. Si lo movemos lo hará usando su posición en el html como punto de referencia.

        Absolute -> El elemento perderá sus medidas y su espacio reservado. Si lo movemos usará el elemento posicionado contenedor como referencia. Si no tiene ninguno, usará el elemento html de referencia. Al ponerle este atributo, el elemento se comportará como si fuera un elemento de bloque.

        Fixed -> El elemento perderá sus medidas y su espacio reservado.
        Si lo movemos usará el elemento html de referencia, y además se quedará fijo en esa posición aunque hagamos scroll.

        ** Sticky viene a mejorar fixed. Hay navegadores que no soportan sticky, por lo que, en estos casos, habrá que usar fixed

        Sticky -> Es una mezcla de position relative y "fixed".
        Con este tipo de posicionamiento los valores top, left, bottom y right no sirven para mover el elemento, si no para indicarle en qué punto pasará a tener un comportamiento de posicionamiento similar a fixed, hasta llegar a ese punto se comportará como si no tuviera posicionamiento, aunque sí contará como posicionado si necesitáramos colocar otro elemento respecto a él (absolute)

        z-index: Es la propiedad que nos permite ordenar los elementos superpuestos para controlar cual se coloca por delante y cual por detrás. Para que funcione esta propiedad, el elemento tiene que estar posicionado.
        z-index: 1;
        z-index: auto; -> es lo mismo que no poner nada 
        El número mayor es el que prevalece
        Se recomienda separar los valores de z-index de 10 en 10 o algo así, por si en un futuro tuviesemos que añadir elementos, tener valores intermedios.
        ** Un elemento padre no se pondrá por delante de un hijo. Lo que habría que hacer es poner al hijo detras del padre. La propiedad que habría que darle al hijo es z-index: -1;
        El padre no puede tener un z-index declarado, sino el hijo volvería a ponerse por delante.

*/

*{
    box-sizing: border-box;
}

body{
    margin: 0;
    background-color: #333;
}

.box {
    width: 150px;
    height: 150px;
}

.box-1{
    background-color: lightcoral;
}

.box-2{
    background-color: lightgreen;
}